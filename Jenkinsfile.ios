#!/usr/bin/env groovy

def callUnity(Map map = [:]) {
    def project = map.get('project', '.')
    def commands = map.get('commands', '')

    def defaultLogFile = env.STAGE_NAME.replaceAll("\\s", "-").toLowerCase()
    def logFile = map.get('logFile', "logs/${defaultLogFile}.log")

    sh "${env.UNITY_ROOT} -projectPath ${project} -quit -batchmode ${commands} -logFile ${logFile}"
}

def downloadUnitySDK() {
    def unitySDKZip = "*.zip"
    copyArtifacts projectName: "${params.UNITY_SDK_PROJECT_NAME}", selector: lastSuccessful(), filter: unitySDKZip

    def files = findFiles glob: unitySDKZip
    unzip zipFile: files[0].name, dir: env.UNITY_SDK_PATH, quiet: true
}

def writeComboYaml() {
    def endpoint = getEndpoint()
    def gameId = params.GAME_ID
    def buildKey = params.BUILD_KEY
    writeFile file: 'combo.yaml', text: """
combo:
  game-id: ${gameId}
  build-key: ${buildKey}
  endpoint: ${endpoint}
"""
}

def downloadFrameworks() {
    def frameworkZip = "*.zip"
    copyArtifacts projectName: params.IOS_PROJECT_NAME, selector: lastSuccessful(), filter: frameworkZip, excludes: "*dsym*.zip"

    def files = findFiles glob: frameworkZip
    unzip zipFile: files[0].name, dir: env.FRAMEWORK_PATH, quiet: true
}

def downloadComboSDKJson() {
    sh '''
        chmod +x ./combo
        ./combo ios setup
        mv ComboSDK.json Assets/Plugins/iOS
    '''
}

def installComboCLI() {
    writeComboYaml()

    def comboZip = "combo_main_darwin_arm64.zip"
    copyArtifacts projectName: 'SDK/Client/Combo/cli/main', filter: comboZip
    unzip zipFile: comboZip, quiet: true
}

def getEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://api.dev.seayoo.com" : "https://api.seayoo.com"
}

def getDemoEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://combo-demo.dev.seayoo.com" : "https://combo-demo.seayoo.com"
}

def lastExportProjectNotFailed() {
    def url = "${currentBuild.previousBuild.absoluteUrl}wfapi/describe"
    def response = httpRequest(
            url: url,
            httpMode: 'GET',
            quiet: true,
            timeout: 5
    )
    def contentJson = readJSON(text: response.content)
    def stages =  contentJson.stages
    def exportProjectStage = stages.find {it.name == 'Export Project'}
    if (exportProjectStage) {
        println "[info] Previous Export Project Status: ${exportProjectStage.status}"
        return exportProjectStage.status != 'FAILED'
    } else {
        return false
    }
}

def skipExport() {
    if (params.SKIP_EXPORT == 'AUTO') {
        return currentBuild.changeSets.isEmpty() && currentBuild.previousBuild != null && lastExportProjectNotFailed()
    }
    if (params.SKIP_EXPORT == 'YES') {
        return true
    }
    if (params.SKIP_EXPORT == 'NO') {
        return false
    }
}

pipeline {
    agent {
        node {
            label 'combo-demo:ios'
        }
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(
            daysToKeepStr: '15',
            artifactNumToKeepStr: '20'
        ))
        ansiColor('xterm')
        timestamps()
    }
    parameters {
        string(name: 'GAME_ID', defaultValue: 'demo', description: 'GAME_ID', trim: true)
        string(name: 'PUBLISHABLE_KEY', defaultValue: 'pk_Kk7tOa5keufEdZCmfoOel2ffe9WS6fPV', description: '客户端 API 密钥', trim: true)
        string(name: 'BUILD_KEY', defaultValue: 'bk_jLFxnnRuxwmhGHIFKzvljRcFw5ycPMNX', description: '构建 API 密钥', trim: true)
        choice(name: 'TARGET_ENV', choices: ['dev', 'prod'], description: '选择线上/测试环境')
        string(name: 'BUNDLE_VERSION', defaultValue: '1.0.0', description: 'Demo Bundle Version', trim: true)
        string(name: 'IOS_PROJECT_NAME',
            defaultValue: 'SDK/Client/Combo/ios/main',
            description: 'iOS 工程的 Jenkins Full project name',
            trim: true)
        string(name: 'UNITY_SDK_PROJECT_NAME',
            defaultValue: "SDK/Client/Combo/unity/${env.BRANCH_NAME}",
            description: 'Unity SDK 工程的 Jenkins Full project name',
            trim: true)
        choice(name: 'SKIP_EXPORT', choices: ['NO', 'AUTO', 'YES'], description: '是否跳过 Export Project stage ')
        booleanParam(name: 'CLEAN_WS',
            defaultValue: false,
            description: 'When checked, will clean workspace.')
    }
    environment {
        UNITY_ROOT = getUnityRoot('2019.4.40f1')
        BUILD_DIR = "${env.WORKSPACE}/build"
        FRAMEWORK_PATH = "${env.WORKSPACE}/Frameworks"
        IOS_IPA = artifactName(name: "combo-demo", extension: "ipa")
        UNITY_SDK_PATH = "${env.WORKSPACE}/Packages"
    }
    stages {
        stage('Clean and Setup') {
            steps {
                script {
                    if (params.CLEAN_WS) {
                        cleanWs()
                    }
                    sh """
                        rm -rf *.ipa
                        rm -rf *.zip
                        rm -rf logs/*
                        rm -rf ${env.FRAMEWORK_PATH}
                        rm -rf ${env.UNITY_SDK_PATH}/com.seayoo.sdk
                    """
                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    sh 'mkdir -p logs'
                }
            }
        }
        stage('UnitySDK Assembly') {
            steps {
                script {
                    downloadUnitySDK()
                }
            }
        }
        stage('Switch Platform') {
            steps {
                script {
                    def platformFile = 'platform.txt'
                    if (fileExists(platformFile)) {
                        echo 'Current platform was already iOS, skip switch.'
                    } else {
                        callUnity  commands: '-buildTarget iOS'
                        writeFile file: platformFile, text: 'iOS'
                    }
                }
            }
        }
        stage('Gen') {
            steps {
                script {
                    installComboCLI()
                    downloadFrameworks()
                    downloadComboSDKJson()
                }
            }
        }
        stage('Update Settings') {
            environment {
                COMBOSDK_GAME_ID = "${params.GAME_ID}"
                COMBOSDK_PUBLISHABLE_KEY = "${params.PUBLISHABLE_KEY}"
                COMBOSDK_ENDPOINT = getEndpoint()
            }
            steps {
                script {
                    callUnity commands: "-executeMethod Builder.UpdateComboSDKSettings"
                }
            }
        }
        stage('Export Project') {
            when {
                not { expression { return  skipExport() } }
            }
            environment {
                EXPORT_PATH = "build"
                DEMO_ENDPOINT = getDemoEndpoint()
                BUNDLE_VERSION = "${params.BUNDLE_VERSION}"
            }
            steps {
                script {
                    callUnity commands: "-executeMethod Builder.BuildIOSDemo"
                }
            }
        }
        stage('Build IPA') {
            steps {
                script {
                    dir(env.BUILD_DIR) {
                        keychainUnlock()
                        sh """xcodebuild clean archive \
                            -project Unity-iPhone.xcodeproj \
                            -scheme Unity-iPhone \
                            -destination generic/platform=iOS \
                            PROVISIONING_PROFILE_SPECIFIER=dev_provision \
                            -archivePath demo.xcarchive
                        """
                        sh """xcodebuild -exportArchive \
                            -archivePath demo.xcarchive \
                            -exportPath ipa \
                            -exportOptionsPlist ${env.WORKSPACE}/Assets/Plugins/iOS/ExportOptions.plist
                        """
                    }
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    sh "find ${env.BUILD_DIR}/ipa -name '*.ipa' -exec mv {} ${env.WORKSPACE}/${env.IOS_IPA} \\;"
                    archiveArtifacts artifacts: '*.ipa', onlyIfSuccessful: true
                }
            }
        }
    }
    post {
        success {
            script {
                def ipaUrl = "${env.BUILD_URL}artifact/${env.IOS_IPA}"
                def downloads = [
                    ['name': '[ipa]', 'url': ipaUrl]
                ]
                notify withChanges: true, downloads: downloads
            }
        }
        failure {
            notify withChanges: true, withErrors: true
        }
        always {
            script {
                currentBuild.displayName = "${params.GAME_ID} ${params.TARGET_ENV}"
                currentBuild.description = "build_num: ${env.BUILD_NUMBER}"
                zip archive: true, zipFile: 'logs.zip', dir: 'logs'
            }
        }
    }     
}
